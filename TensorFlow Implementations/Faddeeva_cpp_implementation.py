import tensorflow as tf
import numpy as np
import math as m
import scipy
from scipy import special
from sympy import *

t = symbols('t')                 # t is a symbol from scipy

DBL_EPSILON = tf.constant(2.2204460492503131e-16, dtype=tf.float64)
pi = tf.constant(m.pi, dtype=tf.float64)
HUGE_VAL = tf.constant(m.inf, dtype=tf.float64)

# tf.config.run_functions_eagerly(True)         #Uncomment this to run functions eagerly

erfcx_coeff = [[1., 0.70878032454106438663e-3, 0.71234091047026302958e-3, 0.35779077297597742384e-5, 0.17403143962587937815e-7, 0.81710660047307788845e-10, 0.36885022360434957634e-12, 0.15917038551111111111e-14 ]
,[3., 0.21479143208285144230e-2 ,0.72686402367379996033e-3, 0.36843175430938995552e-5, 0.18071841272149201685e-7, 0.85496449296040325555e-10, 0.38852037518534291510e-12, 0.16868473576888888889e-14 ]
,[5., 0.36165255935630175090e-2, 0.74182092323555510862e-3, 0.37948319957528242260e-5, 0.18771627021793087350e-7, 0.89484715122415089123e-10, 0.40935858517772440862e-12, 0.17872061464888888889e-14 ]
,[7., 0.51154983860031979264e-2, 0.75722840734791660540e-3, 0.39096425726735703941e-5, 0.19504168704300468210e-7, 0.93687503063178993915e-10, 0.43143925959079664747e-12, 0.18939926435555555556e-14 ]
,[9., 0.66457513172673049824e-2, 0.77310406054447454920e-3, 0.40289510589399439385e-5, 0.20271233238288381092e-7, 0.98117631321709100264e-10, 0.45484207406017752971e-12, 0.20076352213333333333e-14 ]
,[11., 0.82082389970241207883e-2, 0.78946629611881710721e-3, 0.41529701552622656574e-5, 0.21074693344544655714e-7, 0.10278874108587317989e-9, 0.47965201390613339638e-12, 0.21285907413333333333e-14 ]
,[13., 0.98039537275352193165e-2, 0.80633440108342840956e-3, 0.42819241329736982942e-5, 0.21916534346907168612e-7, 0.10771535136565470914e-9, 0.50595972623692822410e-12, 0.22573462684444444444e-14 ]
,[15., 0.11433927298290302370e-1, 0.82372858383196561209e-3, 0.44160495311765438816e-5, 0.22798861426211986056e-7, 0.11291291745879239736e-9, 0.53386189365816880454e-12, 0.23944209546666666667e-14 ]
,[17., 0.13099232878814653979e-1, 0.84167002467906968214e-3, 0.45555958988457506002e-5, 0.23723907357214175198e-7, 0.11839789326602695603e-9, 0.56346163067550237877e-12, 0.25403679644444444444e-14 ]
,[19., 0.14800987015587535621e-1, 0.86018092946345943214e-3, 0.47008265848816866105e-5, 0.24694040760197315333e-7, 0.12418779768752299093e-9, 0.59486890370320261949e-12, 0.26957764568888888889e-14 ]
,[21., 0.16540351739394069380e-1, 0.87928458641241463952e-3, 0.48520195793001753903e-5, 0.25711774900881709176e-7, 0.13030128534230822419e-9, 0.62820097586874779402e-12, 0.28612737351111111111e-14 ]
,[23., 0.18318536789842392647e-1, 0.89900542647891721692e-3, 0.50094684089553365810e-5, 0.26779777074218070482e-7, 0.13675822186304615566e-9, 0.66358287745352705725e-12, 0.30375273884444444444e-14 ]
,[25., 0.20136801964214276775e-1, 0.91936908737673676012e-3, 0.51734830914104276820e-5, 0.27900878609710432673e-7, 0.14357976402809042257e-9, 0.70114790311043728387e-12, 0.32252476000000000000e-14 ]
,[27., 0.21996459598282740954e-1, 0.94040248155366777784e-3, 0.53443911508041164739e-5, 0.29078085538049374673e-7, 0.15078844500329731137e-9, 0.74103813647499204269e-12, 0.34251892320000000000e-14 ]
,[29., 0.23898877187226319502e-1, 0.96213386835900177540e-3, 0.55225386998049012752e-5, 0.30314589961047687059e-7, 0.15840826497296335264e-9, 0.78340500472414454395e-12, 0.36381553564444444445e-14 ]
,[31., 0.25845480155298518485e-1, 0.98459293067820123389e-3, 0.57082915920051843672e-5, 0.31613782169164830118e-7, 0.16646478745529630813e-9, 0.82840985928785407942e-12, 0.38649975768888888890e-14 ]
,[33., 0.27837754783474696598e-1, 0.10078108563256892757e-2, 0.59020366493792212221e-5, 0.32979263553246520417e-7, 0.17498524159268458073e-9, 0.87622459124842525110e-12, 0.41066206488888888890e-14 ]
,[35., 0.29877251304899307550e-1, 0.10318204245057349310e-2, 0.61041829697162055093e-5, 0.34414860359542720579e-7, 0.18399863072934089607e-9, 0.92703227366365046533e-12, 0.43639844053333333334e-14 ]
,[37., 0.31965587178596443475e-1, 0.10566560976716574401e-2, 0.63151633192414586770e-5, 0.35924638339521924242e-7, 0.19353584758781174038e-9, 0.98102783859889264382e-12, 0.46381060817777777779e-14 ]
,[39., 0.34104450552588334840e-1, 0.10823541191350532574e-2, 0.65354356159553934436e-5, 0.37512918348533521149e-7, 0.20362979635817883229e-9, 0.10384187833037282363e-11, 0.49300625262222222221e-14 ]
,[41., 0.36295603928292425716e-1, 0.11089526167995268200e-2, 0.67654845095518363577e-5, 0.39184292949913591646e-7, 0.21431552202133775150e-9, 0.10994259106646731797e-11, 0.52409949102222222221e-14 ]
,[43., 0.38540888038840509795e-1, 0.11364917134175420009e-2, 0.70058230641246312003e-5, 0.40943644083718586939e-7, 0.22563034723692881631e-9, 0.11642841011361992885e-11, 0.55721092871111111110e-14 ]
,[45., 0.40842225954785960651e-1, 0.11650136437945673891e-2, 0.72569945502343006619e-5, 0.42796161861855042273e-7, 0.23761401711005024162e-9, 0.12332431172381557035e-11, 0.59246802364444444445e-14 ]
,[47., 0.43201627431540222422e-1, 0.11945628793917272199e-2, 0.75195743532849206263e-5, 0.44747364553960993492e-7, 0.25030885216472953674e-9, 0.13065684400300476484e-11, 0.63000532853333333334e-14 ]
,[49., 0.45621193513810471438e-1, 0.12251862608067529503e-2, 0.77941720055551920319e-5, 0.46803119830954460212e-7, 0.26375990983978426273e-9, 0.13845421370977119765e-11, 0.66996477404444444445e-14 ]
,[51., 0.48103121413299865517e-1, 0.12569331386432195113e-2, 0.80814333496367673980e-5, 0.48969667335682018324e-7, 0.27801515481905748484e-9, 0.14674637611609884208e-11, 0.71249589351111111110e-14 ]
,[53., 0.50649709676983338501e-1, 0.12898555233099055810e-2, 0.83820428414568799654e-5, 0.51253642652551838659e-7, 0.29312563849675507232e-9, 0.15556512782814827846e-11, 0.75775607822222222221e-14 ]
,[55., 0.53263363664388864181e-1, 0.13240082443256975769e-2, 0.86967260015007658418e-5, 0.53662102750396795566e-7, 0.30914568786634796807e-9, 0.16494420240828493176e-11, 0.80591079644444444445e-14 ]
,[57., 0.55946601353500013794e-1, 0.13594491197408190706e-2, 0.90262520233016380987e-5, 0.56202552975056695376e-7, 0.32613310410503135996e-9, 0.17491936862246367398e-11, 0.85713381688888888890e-14 ]
,[59., 0.58702059496154081813e-1, 0.13962391363223647892e-2, 0.93714365487312784270e-5, 0.58882975670265286526e-7, 0.34414937110591753387e-9, 0.18552853109751857859e-11, 0.91160736711111111110e-14 ]
,[61., 0.61532500145144778048e-1, 0.14344426411912015247e-2, 0.97331446201016809696e-5, 0.61711860507347175097e-7, 0.36325987418295300221e-9, 0.19681183310134518232e-11, 0.96952238400000000000e-14 ]
,[63., 0.64440817576653297993e-1, 0.14741275456383131151e-2, 0.10112293819576437838e-4, 0.64698236605933246196e-7, 0.38353412915303665586e-9, 0.20881176114385120186e-11, 0.10310784480000000000e-13 ]
,[65., 0.67430045633130393282e-1, 0.15153655418916540370e-2, 0.10509857606888328667e-4, 0.67851706529363332855e-7, 0.40504602194811140006e-9, 0.22157325110542534469e-11, 0.10964842115555555556e-13 ]
,[67., 0.70503365513338850709e-1, 0.15582323336495709827e-2, 0.10926868866865231089e-4, 0.71182482239613507542e-7, 0.42787405890153386710e-9, 0.23514379522274416437e-11, 0.11659571751111111111e-13 ]
,[69., 0.73664114037944596353e-1, 0.16028078812438820413e-2, 0.11364423678778207991e-4, 0.74701423097423182009e-7, 0.45210162777476488324e-9, 0.24957355004088569134e-11, 0.12397238257777777778e-13 ]
,[71., 0.76915792420819562379e-1, 0.16491766623447889354e-2, 0.11823685320041302169e-4, 0.78420075993781544386e-7, 0.47781726956916478925e-9, 0.26491544403815724749e-11, 0.13180196462222222222e-13 ]
,[73., 0.80262075578094612819e-1, 0.16974279491709504117e-2, 0.12305888517309891674e-4, 0.82350717698979042290e-7, 0.50511496109857113929e-9, 0.28122528497626897696e-11, 0.14010889635555555556e-13 ]
,[75., 0.83706822008980357446e-1, 0.17476561032212656962e-2, 0.12812343958540763368e-4, 0.86506399515036435592e-7, 0.53409440823869467453e-9, 0.29856186620887555043e-11, 0.14891851591111111111e-13 ]
,[77., 0.87254084284461718231e-1, 0.17999608886001962327e-2, 0.13344443080089492218e-4, 0.90900994316429008631e-7, 0.56486134972616465316e-9, 0.31698707080033956934e-11, 0.15825697795555555556e-13 ]
,[79., 0.90908120182172748487e-1, 0.18544478050657699758e-2, 0.13903663143426120077e-4, 0.95549246062549906177e-7, 0.59752787125242054315e-9, 0.33656597366099099413e-11, 0.16815130613333333333e-13 ]
,[81., 0.94673404508075481121e-1, 0.19112284419887303347e-2, 0.14491572616545004930e-4, 0.10046682186333613697e-6, 0.63221272959791000515e-9, 0.35736693975589130818e-11, 0.17862931591111111111e-13 ]
,[83., 0.98554641648004456555e-1, 0.19704208544725622126e-2, 0.15109836875625443935e-4, 0.10567036667675984067e-6, 0.66904168640019354565e-9, 0.37946171850824333014e-11, 0.18971959040000000000e-13 ]
,[85., 0.10255677889470089531e0, 0.20321499629472857418e-2, 0.15760224242962179564e-4, 0.11117756071353507391e-6, 0.70814785110097658502e-9, 0.40292553276632563925e-11, 0.20145143075555555556e-13 ]
,[87., 0.10668502059865093318e0, 0.20965479776148731610e-2, 0.16444612377624983565e-4, 0.11700717962026152749e-6, 0.74967203250938418991e-9, 0.42783716186085922176e-11, 0.21385479360000000000e-13 ]
,[89., 0.11094484319386444474e0, 0.21637548491908170841e-2, 0.17164995035719657111e-4, 0.12317915750735938089e-6, 0.79376309831499633734e-9, 0.45427901763106353914e-11, 0.22696025653333333333e-13 ]
,[91., 0.11534201115268804714e0, 0.22339187474546420375e-2, 0.17923489217504226813e-4, 0.12971465288245997681e-6, 0.84057834180389073587e-9, 0.48233721206418027227e-11, 0.24079890062222222222e-13 ]
,[93., 0.11988259392684094740e0, 0.23071965691918689601e-2, 0.18722342718958935446e-4, 0.13663611754337957520e-6, 0.89028385488493287005e-9, 0.51210161569225846701e-11, 0.25540227111111111111e-13 ]
,[95., 0.12457298393509812907e0, 0.23837544771809575380e-2, 0.19563942105711612475e-4, 0.14396736847739470782e-6, 0.94305490646459247016e-9, 0.54366590583134218096e-11, 0.27080225920000000000e-13 ]
,[97., 0.12941991566142438816e0, 0.24637684719508859484e-2, 0.20450821127475879816e-4, 0.15173366280523906622e-6, 0.99907632506389027739e-9, 0.57712760311351625221e-11, 0.28703099555555555556e-13 ]
,[99., 0.13443048593088696613e0, 0.25474249981080823877e-2, 0.21385669591362915223e-4, 0.15996177579900443030e-6, 0.10585428844575134013e-8, 0.61258809536787882989e-11, 0.30412080142222222222e-13 ]
,[101., 0.13961217543434561353e0, 0.26349215871051761416e-2, 0.22371342712572567744e-4, 0.16868008199296822247e-6, 0.11216596910444996246e-8, 0.65015264753090890662e-11, 0.32210394506666666666e-13 ]
,[103., 0.14497287157673800690e0, 0.27264675383982439814e-2, 0.23410870961050950197e-4, 0.17791863939526376477e-6, 0.11886425714330958106e-8, 0.68993039665054288034e-11, 0.34101266222222222221e-13 ]
,[105., 0.15052089272774618151e0, 0.28222846410136238008e-2, 0.24507470422713397006e-4, 0.18770927679626136909e-6, 0.12597184587583370712e-8, 0.73203433049229821618e-11, 0.36087889048888888890e-13 ]
,[107., 0.15626501395774612325e0, 0.29226079376196624949e-2, 0.25664553693768450545e-4, 0.19808568415654461964e-6, 0.13351257759815557897e-8, 0.77658124891046760667e-11, 0.38173420035555555555e-13 ]
,[109., 0.16221449434620737567e0, 0.30276865332726475672e-2, 0.26885741326534564336e-4, 0.20908350604346384143e-6, 0.14151148144240728728e-8, 0.82369170665974313027e-11, 0.40360957457777777779e-13 ]
,[111., 0.16837910595412130659e0, 0.31377844510793082301e-2, 0.28174873844911175026e-4, 0.22074043807045782387e-6, 0.14999481055996090039e-8, 0.87348993661930809254e-11, 0.42653528977777777779e-13 ]
,[113., 0.17476916455659369953e0, 0.32531815370903068316e-2, 0.29536024347344364074e-4, 0.23309632627767074202e-6, 0.15899007843582444846e-8, 0.92610375235427359475e-11, 0.45054073102222222221e-13 ]
,[115., 0.18139556223643701364e0, 0.33741744168096996041e-2, 0.30973511714709500836e-4, 0.24619326937592290996e-6, 0.16852609412267750744e-8, 0.98166442942854895573e-11, 0.47565418097777777779e-13 ]
,[117., 0.18826980194443664549e0, 0.35010775057740317997e-2, 0.32491914440014267480e-4, 0.26007572375886319028e-6, 0.17863299617388376116e-8, 0.10403065638343878679e-10, 0.50190265831111111110e-13 ]
,[119., 0.19540403413693967350e0, 0.36342240767211326315e-2, 0.34096085096200907289e-4, 0.27479061117017637474e-6, 0.18934228504790032826e-8, 0.11021679075323598664e-10, 0.52931171733333333334e-13 ]
,[121., 0.20281109560651886959e0, 0.37739673859323597060e-2, 0.35791165457592409054e-4, 0.29038742889416172404e-6, 0.20068685374849001770e-8, 0.11673891799578381999e-10, 0.55790523093333333334e-13 ]
,[123., 0.21050455062669334978e0, 0.39206818613925652425e-2, 0.37582602289680101704e-4, 0.30691836231886877385e-6, 0.21270101645763677824e-8, 0.12361138551062899455e-10, 0.58770520160000000000e-13 ]
,[125., 0.21849873453703332479e0, 0.40747643554689586041e-2, 0.39476163820986711501e-4, 0.32443839970139918836e-6, 0.22542053491518680200e-8, 0.13084879235290858490e-10, 0.61873153262222222221e-13 ]
,[127., 0.22680879990043229327e0, 0.42366354648628516935e-2, 0.41477956909656896779e-4, 0.34300544894502810002e-6, 0.23888264229264067658e-8, 0.13846596292818514601e-10, 0.65100183751111111110e-13 ]
,[129., 0.23545076536988703937e0, 0.44067409206365170888e-2, 0.43594444916224700881e-4, 0.36268045617760415178e-6, 0.25312606430853202748e-8, 0.14647791812837903061e-10, 0.68453122631111111110e-13 ]
,[131., 0.24444156740777432838e0, 0.45855530511605787178e-2, 0.45832466292683085475e-4, 0.38352752590033030472e-6, 0.26819103733055603460e-8, 0.15489984390884756993e-10, 0.71933206364444444445e-13 ]
,[133., 0.25379911500634264643e0, 0.47735723208650032167e-2, 0.48199253896534185372e-4, 0.40561404245564732314e-6, 0.28411932320871165585e-8, 0.16374705736458320149e-10, 0.75541379822222222221e-13 ]
,[135., 0.26354234756393613032e0, 0.49713289477083781266e-2, 0.50702455036930367504e-4, 0.42901079254268185722e-6, 0.30095422058900481753e-8, 0.17303497025347342498e-10, 0.79278273368888888890e-13 ]
,[137., 0.27369129607732343398e0, 0.51793846023052643767e-2, 0.53350152258326602629e-4, 0.45379208848865015485e-6, 0.31874057245814381257e-8, 0.18277905010245111046e-10, 0.83144182364444444445e-13 ]
,[139., 0.28426714781640316172e0, 0.53983341916695141966e-2, 0.56150884865255810638e-4, 0.48003589196494734238e-6, 0.33752476967570796349e-8, 0.19299477888083469086e-10, 0.87139049137777777779e-13 ]
,[141., 0.29529231465348519920e0, 0.56288077305420795663e-2, 0.59113671189913307427e-4, 0.50782393781744840482e-6, 0.35735475025851713168e-8, 0.20369760937017070382e-10, 0.91262442613333333334e-13 ]
,[143., 0.30679050522528838613e0, 0.58714723032745403331e-2, 0.62248031602197686791e-4, 0.53724185766200945789e-6, 0.37827999418960232678e-8, 0.21490291930444538307e-10, 0.95513539182222222221e-13 ]
,[145., 0.31878680111173319425e0, 0.61270341192339103514e-2, 0.65564012259707640976e-4, 0.56837930287837738996e-6, 0.40035151353392378882e-8, 0.22662596341239294792e-10, 0.99891109760000000000e-13 ]
,[147., 0.33130773722152622027e0, 0.63962406646798080903e-2, 0.69072209592942396666e-4, 0.60133006661885941812e-6, 0.42362183765883466691e-8, 0.23888182347073698382e-10, 0.10439349811555555556e-12 ]
,[149., 0.34438138658041336523e0, 0.66798829540414007258e-2, 0.72783795518603561144e-4, 0.63619220443228800680e-6, 0.44814499336514453364e-8, 0.25168535651285475274e-10, 0.10901861383111111111e-12 ]
,[151., 0.35803744972380175583e0, 0.69787978834882685031e-2, 0.76710543371454822497e-4, 0.67306815308917386747e-6, 0.47397647975845228205e-8, 0.26505114141143050509e-10, 0.11376390933333333333e-12 ]
,[153., 0.37230734890119724188e0, 0.72938706896461381003e-2, 0.80864854542670714092e-4, 0.71206484718062688779e-6, 0.50117323769745883805e-8, 0.27899342394100074165e-10, 0.11862637614222222222e-12 ]
,[155., 0.38722432730555448223e0, 0.76260375162549802745e-2, 0.85259785810004603848e-4, 0.75329383305171327677e-6, 0.52979361368388119355e-8, 0.29352606054164086709e-10, 0.12360253370666666667e-12 ]
,[157., 0.40282355354616940667e0, 0.79762880915029728079e-2, 0.89909077342438246452e-4, 0.79687137961956194579e-6, 0.55989731807360403195e-8, 0.30866246101464869050e-10, 0.12868841946666666667e-12 ]
,[159., 0.41914223158913787649e0, 0.83456685186950463538e-2, 0.94827181359250161335e-4, 0.84291858561783141014e-6, 0.59154537751083485684e-8, 0.32441553034347469291e-10, 0.13387957943111111111e-12 ]
,[161., 0.43621971639463786896e0, 0.87352841828289495773e-2, 0.10002929142066799966e-3, 0.89156148280219880024e-6, 0.62480008150788597147e-8, 0.34079760983458878910e-10, 0.13917107176888888889e-12 ]
,[163., 0.45409763548534330981e0, 0.91463027755548240654e-2, 0.10553137232446167258e-3, 0.94293113464638623798e-6, 0.65972492312219959885e-8, 0.35782041795476563662e-10, 0.14455745872000000000e-12 ]
,[165., 0.47282001668512331468e0, 0.95799574408860463394e-2, 0.11135019058000067469e-3, 0.99716373005509038080e-6, 0.69638453369956970347e-8, 0.37549499088161345850e-10, 0.15003280712888888889e-12 ]
,[167., 0.49243342227179841649e0, 0.10037550043909497071e-1, 0.11750334542845234952e-3, 0.10544006716188967172e-5, 0.73484461168242224872e-8, 0.39383162326435752965e-10, 0.15559069118222222222e-12 ]
,[169., 0.51298708979209258326e0, 0.10520454564612427224e-1, 0.12400930037494996655e-3, 0.11147886579371265246e-5, 0.77517184550568711454e-8, 0.41283980931872622611e-10, 0.16122419680000000000e-12 ]
,[171., 0.53453307979101369843e0, 0.11030120618800726938e-1, 0.13088741519572269581e-3, 0.11784797595374515432e-5, 0.81743383063044825400e-8, 0.43252818449517081051e-10, 0.16692592640000000000e-12 ]
,[173., 0.55712643071169299478e0, 0.11568077107929735233e-1, 0.13815797838036651289e-3, 0.12456314879260904558e-5, 0.86169898078969313597e-8, 0.45290446811539652525e-10, 0.17268801084444444444e-12 ]
,[175., 0.58082532122519320968e0, 0.12135935999503877077e-1, 0.14584223996665838559e-3, 0.13164068573095710742e-5, 0.90803643355106020163e-8, 0.47397540713124619155e-10, 0.17850211608888888889e-12 ]
,[177., 0.60569124025293375554e0, 0.12735396239525550361e-1, 0.15396244472258863344e-3, 0.13909744385382818253e-5, 0.95651595032306228245e-8, 0.49574672127669041550e-10, 0.18435945564444444444e-12 ]
,[179., 0.63178916494715716894e0, 0.13368247798287030927e-1, 0.16254186562762076141e-3, 0.14695084048334056083e-5, 0.10072078109604152350e-7, 0.51822304995680707483e-10, 0.19025081422222222222e-12 ]
,[181., 0.65918774689725319200e0, 0.14036375850601992063e-1, 0.17160483760259706354e-3, 0.15521885688723188371e-5, 0.10601827031535280590e-7, 0.54140790105837520499e-10, 0.19616655146666666667e-12 ]
,[183., 0.68795950683174433822e0, 0.14741765091365869084e-1, 0.18117679143520433835e-3, 0.16392004108230585213e-5, 0.11155116068018043001e-7, 0.56530360194925690374e-10, 0.20209663662222222222e-12 ]
,[185., 0.71818103808729967036e0, 0.15486504187117112279e-1, 0.19128428784550923217e-3, 0.17307350969359975848e-5, 0.11732656736113607751e-7, 0.58991125287563833603e-10, 0.20803065333333333333e-12 ]
,[187., 0.74993321911726254661e0, 0.16272790364044783382e-1, 0.20195505163377912645e-3, 0.18269894883203346953e-5, 0.12335161021630225535e-7, 0.61523068312169087227e-10, 0.21395783431111111111e-12 ]
,[189., 0.78330143531283492729e0, 0.17102934132652429240e-1, 0.21321800585063327041e-3, 0.19281661395543913713e-5, 0.12963340087354341574e-7, 0.64126040998066348872e-10, 0.21986708942222222222e-12 ]
,[191., 0.81837581041023811832e0, 0.17979364149044223802e-1, 0.22510330592753129006e-3, 0.20344732868018175389e-5, 0.13617902941839949718e-7, 0.66799760083972474642e-10, 0.22574701262222222222e-12 ]
,[193., 0.85525144775685126237e0, 0.18904632212547561026e-1, 0.23764237370371255638e-3, 0.21461248251306387979e-5, 0.14299555071870523786e-7, 0.69543803864694171934e-10, 0.23158593688888888889e-12 ]
,[195., 0.89402868170849933734e0, 0.19881418399127202569e-1, 0.25086793128395995798e-3, 0.22633402747585233180e-5, 0.15008997042116532283e-7, 0.72357609075043941261e-10, 0.23737194737777777778e-12 ]
,[197., 0.93481333942870796363e0, 0.20912536329780368893e-1, 0.26481403465998477969e-3, 0.23863447359754921676e-5, 0.15746923065472184451e-7, 0.75240468141720143653e-10, 0.24309291271111111111e-12 ]
,[199., 0.97771701335885035464e0, 0.22000938572830479551e-1, 0.27951610702682383001e-3, 0.25153688325245314530e-5, 0.16514019547822821453e-7, 0.78191526829368231251e-10, 0.24873652355555555556e-12 ]
,[1.,1.,0.,0.,0.,0.,0.,0.]]

w_im_y100_coeff = [[0.0, 0.0, 9.29741219351111e-14, 8.91289076664501e-12, 9.24743079432750e-10, 1.09397230802316e-7, 1.44274705632767e-5, 0.00284947832213784, 0.00283515933288222] ,
[0.0, 0.0, 1.09174796784000e-13, 1.01226788630734e-11, 1.01973878160210e-9, 1.17167099785313e-7, 1.51067837077256e-5, 0.00290853129416413, 0.00859271612439404] ,
[0.0, 0.0, 1.28945353351111e-13, 1.15474623003335e-11, 1.12786721595184e-9, 1.25748033831992e-7, 1.58350967601730e-5, 0.00297039789702638, 0.0144711598311877] ,
[0.0, 0.0, 1.53265950426667e-13, 1.32356875436034e-11, 1.25150955525072e-9, 1.35254297111631e-7, 1.66176093870037e-5, 0.00303528430128987, 0.0204763204203246] ,
[0.0, 0.0, 1.83447418821333e-13, 1.52494380729989e-11, 1.39359590838097e-9, 1.45821308244857e-7, 1.74602681099862e-5, 0.00310341892762349, 0.0266144619524890] ,
[0.0, 3.02734741777379e-15, 2.21267326807111e-13, 1.76638684626991e-11, 1.55776382304809e-9, 1.57610637020895e-7, 1.83699075823087e-5, 0.00317505570679751, 0.0328923302480936] ,
[0.0, 3.85621238377257e-15, 2.69174019491556e-13, 2.05936873049220e-11, 1.74857339593271e-9, 1.70816469713213e-7, 1.93544260465134e-5, 0.00325047797019375, 0.0393172076811343] ,
[0.0, 4.97565742844394e-15, 3.30599827914667e-13, 2.41750065367812e-11, 1.97180383635866e-9, 1.85674124703765e-7, 2.04230053980390e-5, 0.00333000312731110, 0.0458969765113677] ,
[0.0, 6.51516145152384e-15, 4.10455021191111e-13, 2.85975163019502e-11, 2.23486969481971e-9, 2.02471365015689e-7, 2.15863902406033e-5, 0.00341398833588467, 0.0526401925248490] ,
[0.0, 8.67750768539080e-15, 5.15931898791111e-13, 3.41223908906974e-11, 2.54741715908938e-9, 2.21563721465252e-7, 2.28572461509986e-5, 0.00350283743866489, 0.0595561712286568] ,
[0.0, 1.17918857454506e-14, 6.57864507164444e-13, 4.11170135279678e-11, 2.92219904065184e-9, 2.43395615217850e-7, 2.42506261643187e-5, 0.00359700953812713, 0.0666550894851082] ,
[0.0, 1.64170799277069e-14, 8.53138574968889e-13, 5.01115499813770e-11, 3.37639588612067e-9, 2.68530120023668e-7, 2.57845881373129e-5, 0.00369702972165693, 0.0739481063455192] ,
[0.0, 2.35585322137039e-14, 1.12923032135111e-12, 6.18954711320382e-11, 3.93368162874577e-9, 2.97692007318323e-7, 2.74810275722319e-5, 0.00380350266064927, 0.0814475080650030] ,
[0.0, 3.51831034159160e-14, 1.53351532588444e-12, 7.76926313781698e-11, 4.62760062816473e-9, 3.31832043903507e-7, 2.93668272604223e-5, 0.00391713013224389, 0.0891668840275827] ,
[0.0, 5.57286514318727e-14, 2.15526457582222e-12, 9.95091752839903e-11, 5.50743731786138e-9, 3.72227142271251e-7, 3.14754903959508e-5, 0.00403873403532079, 0.0971213428880323] ,
[0.0, 9.72719741844766e-14, 3.18961874097778e-12, 1.30941035819318e-10, 6.64945796976224e-9, 4.20645961936926e-7, 3.38495497748895e-5, 0.00416928736140654, 0.105327782186033] ,
[7.96978131735199e-15, 1.88504873181906e-13, 5.09566661661863e-12, 1.79341332395496e-10, 8.18190342384637e-9, 4.79650440285819e-7, 3.65443243415659e-5, 0.00430995722878718, 0.113805231074271] ,
[1.02055066157098e-14, 3.44270924302301e-13, 8.77438377491080e-12, 2.60338301704704e-10, 1.03436194288485e-8, 5.53215537698734e-7, 3.96343047212924e-5, 0.00446216757100270, 0.122575297034475] ,
[0.0, 4.21934573088300e-13, 1.44311424118400e-11, 3.98398008539543e-10, 1.35800827947046e-8, 6.47991640200169e-7, 4.32250263804964e-5, 0.00462769704817830, 0.131662769556567] ,
[-4.61606802793048e-14, 4.10338459389010e-14, 1.85339783973053e-11, 6.01466232578876e-10, 1.85368515707943e-8, 7.75098664687244e-7, 4.74745047533522e-5, 0.00480884244185453, 0.141096478698034] ,
[-8.61571813950396e-14, -1.05317741173323e-12, 1.22825247505344e-11, 8.01831967168886e-10, 2.56142613311447e-8, 9.50346647220404e-7, 5.26224828321922e-5, 0.00500868646720047, 0.150910579405489] ,
[-7.51555068635729e-14, -2.43551122569145e-12, -1.23576740173129e-11, 8.21115471440804e-10, 3.39758014432400e-8, 1.18855183339154e-6, 5.90055345459083e-5, 0.00523146615816554, 0.161146481160170] ,
[0.0, -3.09405878645433e-12, -5.26418734332800e-11, 4.40608729134738e-10, 4.06902839171262e-8, 1.48974006714251e-6, 6.70132266587381e-5, 0.00548290029675994, 0.171855512796804] ,
[1.00047849081068e-13, -2.26573897057218e-12, -9.21954146856288e-11, -4.40094999656944e-10, 4.10922083443872e-8, 1.82275698422908e-6, 7.69487894017352e-5, 0.00577015593759670, 0.183101945598153] ,
[1.57033256345903e-13, -1.21807942045445e-13, -1.10081294606128e-10, -1.68413285741059e-9, 3.06521455551300e-8, 2.11806867463603e-6, 8.88128810563420e-5, 0.00610108531443647, 0.194965271915466] ,
[1.41419086542690e-13, 2.36099904001793e-12, -9.40826034343150e-11, -2.94427059741501e-9, 7.34952244499076e-9, 2.27852333925576e-6, 0.000102095996275223, 0.00648257877249221, 0.207540068139666] ,
[6.91577303761185e-14, 4.09537001871721e-12, -4.73995038610545e-11, -3.81765061523621e-9, -2.69297306793608e-8, 2.20605779463236e-6, 0.000115687233311563, 0.00691828781501880, 0.220931855548452] ,
[-1.85833413389838e-14, 4.49216089545361e-12, 1.45159841394957e-11, -4.02047409754968e-9, -6.67429107379571e-8, 1.83272673161711e-6, 0.000127963338746158, 0.00740633507620087, 0.235248273040578] ,
[-8.48821360222007e-14, 3.61954601977793e-12, 7.26564538295022e-11, -3.48503647564994e-9, -1.04854424477684e-7, 1.14275117395447e-6, 0.000137042686504175, 0.00793772851516021, 0.250586263318127] ,
[-1.12846661346351e-13, 1.98505013346496e-12, 1.12458462646959e-10, -2.35124563156777e-9, -1.34434921076431e-7, 1.78004272885969e-7, 0.000141123594439389, 0.00849599361196259, 0.267017249002807] ,
[-1.05141693751817e-13, 2.01551510182827e-13, 1.27603111256375e-10, -8.85743174645771e-10, -1.50771000402542e-7, -9.72623023625229e-7, 0.000138805203311406, 0.00905815638926504, 0.284572935862537] ,
[-7.51518171295746e-14, -1.25981798340077e-12, 1.19578357427912e-10, 6.17883505411163e-10, -1.52028885849074e-7, -2.19387417027955e-6, 0.000129310677767259, 0.00959683467905974, 0.303234255956174] ,
[-3.78752116780249e-14, -2.16500183517954e-12, 9.48402223777205e-11, 1.91707143730475e-9, -1.39105290400040e-7, -3.36708903193279e-6, 0.000112575894261550, 0.0100829577270012, 0.322925211815174] ,
[0.0, -2.49357492276580e-12, 6.15375427998578e-11, 2.85994941171225e-9, -1.14885958304504e-7, -4.38934595764833e-6, 8.92094441972487e-5, 0.0104885754355727, 0.343512335579118] ,
[1.93280876922529e-14, -2.36033793974087e-12, 2.70829481882777e-11, 3.38980111785827e-9, -8.32916640872898e-8, -5.18558621741307e-6, 6.03579937452831e-5, 0.0107893042034319, 0.364809466421437] ,
[3.23331898612865e-14, -1.93342029151904e-12, -3.23834776525146e-12, 3.52683541324746e-9, -4.84047727992079e-8, -5.71327745376710e-6, 2.75216120418496e-5, 0.0109661191582888, 0.386586799356949] ,
[3.61693669794174e-14, -1.37502292703544e-12, -2.64749159742966e-11, 3.34069529748614e-9, -1.38346100338593e-8, -5.96098354842458e-6, -7.63963766852133e-6, 0.0110063780168485, 0.408582755838087] ,
[3.36189159344620e-14, -8.10233377395080e-13, -4.17187912162778e-11, 2.92359916896399e-9, 1.76392001940919e-8, -5.94297395477983e-6, -4.34775272567872e-5, 0.0109041065495008, 0.430517149140067] ,
[2.74944387427216e-14, -3.18272757121263e-13, -4.94926215966854e-11, 2.36943061743127e-9, 4.41818504674777e-8, -5.69198608862147e-6, -7.84886399132570e-5, 0.0106596707563844, 0.452104281355596] ,
[2.00554785608299e-14, 6.26745849741411e-14, -5.11294815929261e-11, 1.76036248377873e-9, 6.48468981588895e-8, -5.25180352474514e-6, -0.000111402681718305, 0.0102790061197460, 0.473064911950052] ,
[1.28310526341435e-14, 3.24772514317486e-13, -4.82696058443972e-11, 1.16030271843247e-9, 7.94213479793195e-8, -4.67072525688350e-6, -0.000141228542672915, 0.00977257991147720, 0.493136389657199] ,
[6.67843418744375e-15, 4.79104371722402e-13, -4.25167556031304e-11, 6.13431133649499e-10, 8.82322529032132e-8, -3.99646217525277e-6, -0.000167265302302286, 0.00915424223540092, 0.512080574334160] ,
[0.0, 5.46138298884487e-13, -3.52394906876444e-11, 1.45939891524201e-10, 9.19561905886521e-8, -3.27259054677830e-6, -0.000189087297838543, 0.00844008804451168, 0.529689454586075] ,
[0.0, 5.48958060084933e-13, -2.75129286252444e-11, -2.30613590052975e-10, 9.14553679995107e-8, -2.53643391405431e-6, -0.000206512305908082, 0.00764741551958803, 0.545788574543301] ,
[0.0, 5.09126549097582e-13, -2.00684621740444e-11, -5.15480620503666e-10, 8.76503350754168e-8, -1.81811276704433e-6, -0.000219560666133314, 0.00679383217399972, 0.560238519102985] ,
[0.0, 4.44614983366893e-13, -1.33726649280000e-11, -7.15124472427554e-10, 8.14302909923223e-8, -1.14046055620134e-6, -0.000228411452292766, 0.00589653210103940, 0.572934780574557] ,
[0.0, 3.69144628079725e-13, -7.67009727022222e-12, -8.40209167630916e-10, 7.35965778154111e-8, -5.19520644486088e-7, -0.000233360015400096, 0.00497174695308428, 0.583806354484078] ,
[0.0, 2.92373866537435e-13, -3.04219404000000e-12, -9.03291635876270e-10, 6.48328032483958e-8, 3.46159449877902e-8, -0.000234779637386583, 0.00403435920693797, 0.592813402377695] ,
[0.0, 2.20508292961878e-13, 5.39827436800000e-13, -9.17191173132435e-10, 5.56945942649483e-8, 5.16816810238469e-7, -0.000233088757657001, 0.00309765797882717, 0.599944287431143] ,
[0.0, 1.57054588160806e-13, 3.17185503537778e-12, -8.93937225144142e-10, 4.66126658065319e-8, 9.25889599226534e-7, -0.000228724289696260, 0.00217321380123455, 0.605212244718199] ,
[0.0, 1.03554394410490e-13, 4.98431808284444e-12, -8.44170899681012e-10, 3.79040371002329e-8, 1.26362360315328e-6, -0.000222120901115348, 0.00127084808488775, 0.608651899697911] ,
[0.0, 6.02166918294593e-14, 6.11924527413333e-12, -7.76877929142286e-10, 2.97874792066466e-8, 1.53394021290262e-6, -0.000213695734395799, 0.000398674360558610, 0.610315801034992] ,
[0.0, 2.64199600425784e-14, 6.71527596551111e-12, -6.99347193200451e-10, 2.24004255721757e-8, 1.74217430908834e-6, -0.000203837837883039, -0.000436809045080599, 0.610271090478798] ,
[0.0, 0.0, 6.89878889991111e-12, -6.17268505809649e-10, 1.58155303986181e-8, 1.89449046544783e-6, -0.000192901502538947, -0.00123059213909629, 0.608596394892174] ,
[0.0, -1.70592080957415e-14, 6.77945502951111e-12, -5.34919979193183e-10, 1.00557950942982e-8, 1.99742641623132e-6, -0.000181202713930471, -0.00197900622413957, 0.605378994264861] ,
[0.0, -2.93116775731528e-14, 6.44880055164444e-12, -4.55360798280572e-10, 5.10771650744617e-9, 2.05754983243326e-6, -0.000169017995536275, -0.00267956767761664, 0.600712294579041] ,
[0.0, -3.68870772789504e-14, 5.98067903591111e-12, -3.80666737401161e-10, 9.32274687606142e-10, 2.08121169128954e-6, -0.000156585012959124, -0.00333082081906010, 0.594693615201127] ,
[0.0, -4.08641524849798e-14, 5.43284224622222e-12, -3.12124165195269e-10, -2.52619038112219e-9, 2.07437900184040e-6, -0.000144104411414501, -0.00393218581960592, 0.587422286317754] ,
[0.0, -4.21622069391690e-14, 4.84904372053333e-12, -2.50412894355398e-10, -5.33302960238755e-9, 2.04253068882944e-6, -0.000131742459665014, -0.00448381570056189, 0.578998042000330] ,
[0.0, -4.15394433041156e-14, 4.26130119288889e-12, -1.95760609619198e-10, -7.55801402994365e-9, 1.99060217809910e-6, -0.000119634165834776, -0.00498646494880749, 0.569519687969312] ,
[0.0, -3.96037266884192e-14, 3.69208702986667e-12, -1.48070386771974e-10, -9.27147311951181e-9, 1.92296633229828e-6, -0.000107886611025119, -0.00544137110368269, 0.559084019300639] ,
[0.0, -3.68297480791105e-14, 3.15631755822222e-12, -1.07023034077889e-10, -1.05415802543171e-8, 1.84344052350693e-6, -9.65823143178552e-5, -0.00585014979332134, 0.547784961529257] ,
[0.0, -3.35786604258932e-14, 2.66308116071111e-12, -7.21570913690413e-11, -1.14325473498155e-8, 1.75531163634435e-6, -8.57824979171118e-5, -0.00621470306707608, 0.535712908316828] ,
[0.0, -3.01176975010651e-14, 2.21708949404444e-12, -4.29297536891811e-11, -1.20035212965989e-8, 1.66137257971813e-6, -7.55301649414733e-5, -0.00653714043677763, 0.522954229620484] ,
[0.0, -2.66383553622852e-14, 1.81986289226667e-12, -1.87619975369109e-11, -1.23080079910565e-8, 1.56396541139067e-6, -6.58529361989536e-5, -0.00681971176031186, 0.509590925775779] ,
[0.0, -2.32724553512663e-14, 1.47067559601778e-12, 9.29043518011689e-13, -1.23936814719841e-8, 1.46502744491414e-6, -5.67656177289626e-5, -0.00706475093976144, 0.495700404818232] ,
[0.0, -2.01058014247099e-14, 1.16729283244444e-12, 1.67077600287371e-11, -1.23024644475994e-8, 1.36613773091139e-6, -4.82724894957300e-5, -0.00727462933274024, 0.481355362509352] ,
[0.0, -1.71895033121030e-14, 9.06533146453333e-13, 2.91055078926058e-11, -1.20707914633152e-8, 1.26856211188985e-6, -4.03693187442791e-5, -0.00745171776495285, 0.466623746755114] ,
[0.0, -1.45491343303968e-14, 6.84687683057778e-13, 3.86119057041664e-11, -1.17299869471582e-8, 1.17329567320350e-6, -3.30451103807051e-5, -0.00759835606500338, 0.451568790301683] ,
[0.0, -1.21919839675618e-14, 4.97824925493333e-13, 4.56704467885296e-11, -1.13067075637399e-8, 1.08110188368936e-6, -2.62836123213399e-5, -0.00771682910403096, 0.436249097693309] ,
[0.0, -1.01126986983562e-14, 3.42005475946667e-13, 5.06772033269047e-11, -1.08234120888847e-8, 9.92548066806719e-7, -2.00645968972249e-5, -0.00780934840150527, 0.420718774435485] ,
[0.0, -8.29759018483877e-15, 2.13427513813333e-13, 5.39816712219695e-11, -1.02988328470145e-8, 9.08037092282652e-7, -1.43649407645329e-5, -0.00787803844608729, 0.405027588097108] ,
[0.0, -6.72785532378535e-15, 1.08519813368889e-13, 5.58890290416602e-11, -9.74843110596177e-9, 8.27835351022176e-7, -9.15952587991070e-6, -0.00792492697082421, 0.389221152697314] ,
[0.0, -5.38194752853893e-15, 2.39958942577778e-14, 5.66632666680514e-11, -9.18482514585532e-9, 7.52097190382403e-7, -4.42198335488405e-6, -0.00795193851092232, 0.373341129154603] ,
[0.0, -4.23726033924968e-15, -4.31200122488889e-14, 5.65307842038162e-11, -8.61818440908442e-9, 6.80886057449006e-7, -1.25300710509758e-7, -0.00796089065715280, 0.357425435833742] ,
[0.0, -3.27129464329845e-15, -9.54868607644444e-14, 5.56841752487493e-11, -8.05658654099460e-9, 6.14192636330905e-7, 3.75768856108915e-6, -0.00795349249687738, 0.341508464319796] ,
[0.0, 0.0, -1.35454242951111e-13, 5.42816867496996e-11, -7.50633653355705e-9, 5.51950282974155e-7, 7.25391599335453e-6, -0.00793134480679489, 0.325621296491363] ,
[0.0, 0.0, -1.65078606506667e-13, 5.24692546559514e-11, -6.97224882294112e-9, 4.94048044631963e-7, 1.03897743776772e-5, -0.00789594162642073, 0.309791919770784] ,
[0.0, 0.0, -1.86144735502222e-13, 5.03543064980069e-11, -6.45789425615626e-9, 4.40341588613879e-7, 1.31908856831070e-5, -0.00784867289903642, 0.294045438112145] ,
[0.0, 0.0, -2.00189951733333e-13, 4.80300864203731e-11, -5.96581448206604e-9, 3.90662262050998e-7, 1.56819287987085e-5, -0.00779082791762527, 0.278404276862537] ,
[0.0, 0.0, -2.08529249546667e-13, 4.55727493791473e-11, -5.49770665519554e-9, 3.44824570734725e-7, 1.78865167961987e-5, -0.00772359935761195, 0.262888380111638] ,
[0.0, 0.0, -2.12280120284444e-13, 4.30438793742120e-11, -5.05458145701201e-9, 3.02632286199763e-7, 1.98271148350340e-5, -0.00764808771652904, 0.247515399541810] ,
[0.0, 0.0, -2.12386278151111e-13, 4.04927157582065e-11, -4.63689740696714e-9, 2.63883385425394e-7, 2.15249911130200e-5, -0.00756530601363840, 0.232300874116889] ,
[0.0, 0.0, -2.09639785688889e-13, 3.79581040717659e-11, -4.24467430584175e-9, 2.28374001356429e-7, 2.30001944041295e-5, -0.00747618463059797, 0.217258400212973] ,
[0.0, 0.0, -2.04701316782222e-13, 3.54701923721629e-11, -3.87758846424566e-9, 1.95901540433900e-7, 2.42715527276319e-5, -0.00738157619804935, 0.202399792007882] ,
[0.0, 0.0, -1.98118445440000e-13, 3.30518962138989e-11, -3.53505214680153e-9, 1.66267102977443e-7, 2.53566885678413e-5, -0.00728226045303398, 0.187735232115581] ,
[0.0, 0.0, -1.90341963040000e-13, 3.07201560361056e-11, -3.21627942669569e-9, 1.39277323756574e-7, 2.62720468223838e-5, -0.00717894900891428, 0.173273412584797] ,
[0.0, 0.0, -1.81740290631111e-13, 2.84870102625480e-11, -2.92034040917547e-9, 1.14745733478166e-7, 2.70329323101322e-5, -0.00707228999342455, 0.159021666483287] ,
[0.0, 0.0, -1.72612112604444e-13, 2.63605062509899e-11, -2.64620555486836e-9, 9.24937271673930e-8, 2.76535542291606e-5, -0.00696287252200450, 0.144986090366103] ,
[0.0, 0.0, -1.63197369600000e-13, 2.43454696512098e-11, -2.39278162003144e-9, 7.23512124379796e-8, 2.81470754311339e-5, -0.00685123098302811, 0.131171657982080] ,
[0.0, 0.0, -1.53686755840000e-13, 2.24441509517273e-11, -2.15894053401238e-9, 5.41569993100468e-8, 2.85256647817229e-5, -0.00673784911924634, 0.117582325611606] ,
[0.0, 0.0, -1.44229900124444e-13, 2.06567661254214e-11, -1.94354235570389e-9, 3.77589833979522e-8, 2.88005512163639e-5, -0.00662316389598456, 0.104221129453617] ,
[0.0, 0.0, -1.34942346915556e-13, 1.89819464426801e-11, -1.74545329102499e-9, 2.30141658076430e-8, 2.89820783855272e-5, -0.00650756915161152, 0.0910902754935411] ,
[0.0, 0.0, -1.25911517635556e-13, 1.74171107440513e-11, -1.56355961161343e-9, 9.78854580594157e-9, 2.90797590212997e-5, -0.00639141902973040, 0.0781912222887714] ,
[0.0, 0.0, -1.17201757653333e-13, 1.59587718337471e-11, -1.39677819038554e-9, -2.04308388827280e-9, 2.91023283543235e-5, -0.00627503119560824, 0.0655247571061474] ,
[0.0, 0.0, -1.08858591146667e-13, 1.46027871284479e-11, -1.24406426074269e-9, -1.25974146205180e-8, 2.90577960729601e-5, -0.00615868984170770, 0.0530910658384536] ,
[0.0, 0.0, -1.00912314028444e-13, 1.33445623324306e-11, -1.10441691175530e-9, -2.19829520218237e-8, 2.89534964501917e-5, -0.00604264848894137, 0.0408897971153527]]

@tf.function(autograph=False)
def faddeeva_im_y100(y100, shift, val):
    """
        Given y100=100*y, where y = 1/(1+x) for x >= 0, computes Im[w(x)].
        Here w(x) is Faddeeva / scaled complex error function.

        This uses a look-up table of 100 different Chebyshev polynomials
        for y intervals [0,0.01], [0.01,0.02], ...., [0.99,1]. This allows
        the Chebyshev polynomials to be of significantly lower degree (about 1/30)
        compared to fitting the whole [0,1] interval with a single polynomial. 
    """
    shift = tf.cast(shift,dtype = tf.float64)
    z = tf.cast(val,dtype=tf.float64)
    t_w_im = 2 * y100 - shift
    
    return tf.math.polyval(tf.unstack(z,axis=1),t_w_im)

@tf.function(autograph=False)
def faddeeva_img(x_input):          
    """    
        Compute a scaled Dawson integral :
                faddeeva_img(x) = 2*Dawson(x)/sqrt(pi)
        equivalent to the imaginary part w(x) for real x.
        Uses continued fractions for large |x|, a lookup table of Chebyshev polynomials for smaller |x|,
        and finally a Taylor expansion for |x|<0.01.
    """
    ispi = tf.constant(0.56418958354775628694807945156, dtype=tf.float64)  # 1/sqrt(pi)`
    x = tf.abs(x_input)
    cond_1 = tf.greater(x, tf.constant(45., dtype=tf.float64))  # continued-fraction expansion is faster
    cond_2 = tf.greater(x, tf.constant(5e7, dtype=tf.float64))  # use 1-term expansion, important to avoid overflow
    x2 = tf.math.square(x)

    # we use w_im_y100_coeff to construct a lookup table   
    y100 = 100./(1+(x))   
    y100_int = tf.cast(y100,dtype=tf.int32)  
    cond1 = tf.math.logical_and(tf.math.greater_equal(y100_int,0), tf.math.less_equal(y100_int,96))
    cond2 = tf.math.logical_and(tf.math.greater_equal(y100_int,97), tf.math.less_equal(y100_int,100))
    y100_ranged = tf.where(cond1,y100_int,0)
    coeffs_sel = tf.gather(w_im_y100_coeff, y100_ranged)

    # Using Taylor expansion for small x (|x| <= 0.0309...)
    # (2/sqrt(pi)) * (x - 2/3 x^3  + 4/15 x^5  - 8/105 x^7 + 16/945 x^9) 
    taylor_exp =  tf.math.abs(x) * (1.1283791670955125739              
                              - x2 * (0.75225277806367504925
                                    - x2 * (0.30090111122547001970
                                            - x2 * (0.085971746064420005629
                                                    - x2 * 0.016931216931216931217))))
    res = tf.where(cond1,
                   tf.math.sign(x_input)*faddeeva_im_y100(y100,y100_ranged*2+1,coeffs_sel),
                   tf.where(cond2,
                            taylor_exp,
                            np.nan    # This is hit only when x is NaN
                    ))  

    return tf.where(cond_1,                 # abs(x_input) > 45
                    tf.where(cond_2,        # abs(x_input) > 5e7
                             (ispi) / x, 
                              ispi * ((x2) * (x2 - 4.5) + 2) / (x * ((x2) * (x2 - 5) + 3.75)) #5-term expansion (rely on compiler for CSE), simplified from: ispi / (x-0.5/(x-1/(x-1.5/(x-2/x))))  
                            ),
                    res
                    )

@tf.function(autograph=False)
def erfcx_y100(y100, x, coeff):
    """
        Computes erfc(x) when y belongs to [0,1]
        y100=100*y, where y = 4/(4+x) for x >= 0,
        coeff contains coeffecients for Chebyshev polynomial
    """
    coeff = tf.cast(coeff,tf.float64)
    shift = tf.cast(tf.unstack(coeff,axis=1)[0],dtype = tf.float64)
    coeff0, coeff1, coeff2, coeff3,coeff4,coeff5,coeff6 = tf.unstack(coeff,axis=1)[1:]
    t_erfcx = 2 * y100 - shift

    return coeff0 +(coeff1 +(coeff2 + (coeff3 + (coeff4 + (coeff5 + coeff6 * t_erfcx) * t_erfcx) * t_erfcx) * t_erfcx) * t_erfcx) * t_erfcx


@tf.function(autograph=False) 
def erfcx(x):
    """
        Calculates erfcx(x) = exp(x^2) erfc(x) function, for real x

        First, for x > 50, it uses a continued-fraction expansion (same as
        for the Faddeeva function, but with algebraic simplifications for z=i*x).

        Second, for 0 <= x <= 50, it uses Chebyshev polynomial approximations,
        but with two twists:

            a) It maps x to y = 4 / (4+x) in [0,1].  

            b) Instead of using a single Chebyshev polynomial for the entire
                [0,1] y interval, we break the interval up into 100 equal
                subintervals, with a switch/lookup table, and use much lower
                degree Chebyshev polynomials in each subinterval. 

        For x < 0, we use the relationship erfcx(-x) = 2 exp(x^2) - erfc(x),
        with the usual checks for overflow.
    """

    ispi = 1 / tf.math.sqrt(pi)  
    cond1 = tf.greater_equal(x, 0)
    cond2 = tf.greater(x, 50)     # continued-fraction expansion is faster
    cond3 = tf.greater(x, 5e7)    # 1-term expansion, important to avoid overflow
    cond_else1 = tf.less(x, -26.7)
    cond_else2 = tf.less(x, -6.1)
    y100 =  (400 / (4 + tf.math.abs(x)))
    y100_int = tf.cast(y100,dtype=tf.int32)

    condition = tf.math.logical_and(tf.math.greater_equal(y100_int,0), tf.math.less_equal(y100_int,99))
    y100_int = tf.where(condition,y100_int,100)
    
    # get coefficients for erfcx calculation from 'erfcx_coeff' using y100_int as index
    coeffs_sel = tf.gather(erfcx_coeff, y100_int)

    return tf.where(cond1,
                    tf.where(cond2,
                             tf.where(cond3,
                                      tf.divide(ispi, x),
                                      (ispi * ((x * x) * (x * x + 4.5) + 2) / (x * ((x * x) * (x * x + 5) + 3.75)))
                                      ),
                             erfcx_y100(y100,x,coeffs_sel)
                             ),
                    tf.where(
                            cond_else1,
                            HUGE_VAL,
                            tf.where(cond_else2,
                                    2 * tf.math.exp(tf.math.square(x)),
                                    2 * tf.math.exp(x * x) - erfcx_y100(y100,x,coeffs_sel)
                                    )
                            )
                )

@tf.function(autograph=False)
def sinh_taylor(x):
    """
        Calculates sinh(x) via Taylor series, accurate to machine precision for |x| < 1e-2
    """

    return x * (1 + (x * x) * (0.1666666666666666666667
                               + 0.00833333333333333333333 * (x * x)))

@tf.function(autograph=False)
def sinc(x, sinx):
    """
        Computes sinc(x) where sinc(x) = sin(x)/x 
    """
    return tf.where(tf.less(tf.math.abs(x), 1e-4), 1 - (0.1666666666666666666667) * x * x, sinx / x)

@tf.function(autograph=False)
def estimate_nu(args):
    """
        Compute nu(z) estimate and calculates general continued fraction.
    """
    (relerr, z, a, c, a2, x, y, ya, bool_exceptions, sum_variables) = args
    (sum1, sum2, sum3, sum4, sum5) = sum_variables
    xs = tf.math.sign(y) * tf.math.real(z)

    ispi = 1 / tf.math.sqrt(pi)
    c0 = 3.9
    c1 = 11.398
    c2 = 0.08254
    c3 = 0.1421
    c4 = 0.2023
    nu = tf.math.floor((c0 + c1) / (c2 * x + c3 * ya + c4))
    wr = xs
    wi = ya  
    nu_wr_wi = (0.5 * (nu - 1), wr, wi)

    @tf.function(autograph=False)
    def cond(nu, wr, wi):
        return tf.reduce_any(tf.greater(nu, 0.4))

    @tf.function(autograph=False)
    def body(nu, wr, wi):
        denom = nu / (wr * wr + wi * wi)
        wr, wi = tf.unstack(tf.where(tf.greater(nu, 0.4), (xs - wr * denom, ya + wi * denom), (wr, wi)))
        return (nu - 0.5, wr, wi)  

    wr, wi = tf.unstack(tf.while_loop(cond, body, nu_wr_wi)[1:])

    denom = ispi / (wr * wr + wi * wi)
    return tf.complex(denom * wi, denom * wr)

@tf.function(autograph=False)
def continued_ifhelper(args):  
    """
        Helper function for 'faddeeva_helper function'.
        Continued fraction is faster, it seems to give a large relative error in
        Re w(z) for |x| ~ 6 and small |y|, so use algorithm 816 in this region.
        Poppe & Wijers suggest using a number of terms
           nu = 3 + 1442 / (26*rho + 77)
       where rho = sqrt((x/x0)^2 + (y/y0)^2) where x0=6.3, y0=4.4.
       We also separate the regions where nu==2 and nu==1.
    """
    (relerr, z, a, c, a2, x, y, ya, bool_exceptions, sum_variables) = args
    (sum1, sum2, sum3, sum4, sum5) = sum_variables
    ispi = 1 / np.sqrt(m.pi)
    xs = tf.math.sign(y) * tf.math.real(z)  # compute for -z if y < 0
    cond1 = tf.greater(x + ya, 4000)   # nu <= 2
    cond2 = tf.greater(x + ya, 1e7)    # nu == 1, w(z) = i/sqrt(pi) / z
    cond3_1 = tf.greater(x, ya)
    cond3_2 = tf.math.is_inf(ya)

    yax = ya / xs
    denom = ispi / (xs + yax * ya)
    denom2 = (ispi * yax) / (xs + ya * yax)
    dr = xs * xs - ya * ya - 0.5
    di = 2 * xs * ya
    denom3 = ispi / (dr * dr + di * di)  
    zero = tf.constant(0., dtype=tf.float64)

    nan_constant = tf.constant(np.nan, dtype=tf.float64)
    ret = tf.where(cond1,
                   tf.where(cond2,
                            tf.where(cond3_1,
                                     tf.complex(denom * yax, denom),
                                     tf.where(cond3_2,
                                              tf.where(tf.math.logical_or(tf.math.is_nan(x), tf.less(y, zero)),
                                                       tf.complex(nan_constant, nan_constant),
                                                       tf.complex(zero, zero)),
                                              tf.complex(denom2, denom2 / yax))),
                            tf.complex(denom3 * (xs * di - ya * dr), denom3 * (xs * dr + ya * di))),
                   estimate_nu(args))

    ret = tf.where(tf.less(y, zero), (2.0 * tf.math.exp(tf.complex((ya - xs) * (xs + ya), 2 * xs * y)) - ret), ret)

    return (sum1, sum2, sum3, sum4, sum5, ret)  

@tf.function(autograph=False)
def elseifhelper_if(args):
    """
        Helper function for 'continued_elseifhelper' function.
        Here x<5e-4, computes sum4 and sum5 together as sum5-sum4
    """

    (x, y, a, a2, exp2ax, expm2ax, relerr, sum_variables) = args  
    x2 = x * x  
    expx2 = 1 - x2 * (1 - 0.5 * x2)  
    sum1, sum2, sum3, sum4, sum5 = sum_variables

    n = tf.ones_like(exp2ax, dtype=tf.float64)
    coef = tf.math.exp(-a2 * (n * n)) * expx2 / (a2 * (n * n) + y * y)
    prod2ax = exp2ax
    prodm2ax = expm2ax  
    sum1 = coef
    sum2 = coef * prodm2ax
    sum3 = coef * prod2ax
    sum5 = coef * (2 * a) * n * sinh_taylor((2 * a) * n * x)
    sum4 = tf.zeros_like(sum1, dtype=tf.float64)
    iterators = (coef, n, prod2ax, prodm2ax, sum1, sum2, sum3, sum5)

    @tf.function(autograph=False)
    def cond(coef, n, prod2ax, prodm2ax, sum1, sum2, sum3, sum5):
        return tf.reduce_any(tf.greater_equal(coef * prod2ax, relerr * sum3))  

    @tf.function(autograph=False)
    def body(coef, n_old, prod2ax, prodm2ax, sum1, sum2, sum3, sum5):
        n = n_old + 1 
        coef_ = tf.math.exp(-a2 * (n * n)) * expx2 / (a2 * (n * n) + y * y)
        prod2ax_ = tf.multiply(prod2ax, exp2ax)
        prodm2ax_ = tf.multiply(prodm2ax, expm2ax)
        sum1_ = tf.add(sum1, coef_)
        sum2_ = tf.add(sum2, coef_ * prodm2ax_)
        sum3_ = tf.add(sum3, coef_ * prod2ax_)
        sum5_ = tf.add(sum5, coef_ * (2 * a) * n * sinh_taylor((2 * a) * n * x))

        return_continue = (coef_, n, prod2ax_, prodm2ax_, sum1_, sum2_, sum3_, sum5_)
        return_break = (coef, n_old, prod2ax, prodm2ax, sum1, sum2, sum3, sum5)

        r = tf.unstack(tf.where(tf.greater_equal(coef * prod2ax, relerr * sum3), return_continue, return_break))
        return r

    coef, n_old, prod2ax, prodm2ax, sum1, sum2, sum3, sum5 = tf.unstack(tf.while_loop(cond, body, iterators))
    return (expx2, sum1, sum2, sum3, sum4, sum5)

@tf.function(autograph=False)
def elseifhelper_else(args):
    """
        Helper function for 'continued_elseifhelper' function.
        Here x>5e-4, computes sum4 and sum5 separately
    """
    (x, y, a, a2, exp2ax, expm2ax, relerr, sum_variables) = args  
    sum1, sum2, sum3, sum4, sum5 = sum_variables
    expx2 = tf.math.exp(-x * x)
    n = tf.ones_like(exp2ax, dtype=tf.float64)
    coef = tf.math.exp(-a2 * (n * n)) * expx2 / (a2 * (n * n) + y * y)
    prod2ax = exp2ax
    prodm2ax = expm2ax
    sum1 = coef
    sum2 = coef * prodm2ax
    sum4 = (coef * prodm2ax) * (a * n)
    sum3 = coef * prod2ax
    sum5 = (coef * prod2ax) * (a * n)
    iterators = (coef, n, prod2ax, prodm2ax, sum1, sum2, sum3, sum4, sum5)

    @tf.function(autograph=False)
    def cond(coef, n, prod2ax, prodm2ax, sum1, sum2, sum3, sum4, sum5):
        return tf.reduce_any(tf.greater_equal(tf.multiply(coef, prod2ax) * (a * n), tf.multiply(relerr, sum5)))

    @tf.function(autograph=False)
    def body(coef, n_old, prod2ax, prodm2ax, sum1, sum2, sum3, sum4, sum5):
        n = n_old + 1
        coef_ = tf.math.exp(-a2 * (n * n)) * expx2 / (a2 * (n * n) + y * y)
        prod2ax_ = tf.multiply(prod2ax, exp2ax)
        prodm2ax_ = tf.multiply(prodm2ax, expm2ax)
        sum1_ = tf.add(coef_, sum1)
        sum2_ = tf.add(sum2, coef_ * prodm2ax_)
        sum4_ = tf.add(sum4, (coef_ * prodm2ax_) * (a * n))
        sum3_ = tf.add(sum3, coef_ * prod2ax_)
        sum5_ = tf.add(sum5, (coef_ * prod2ax_) * (a * n))

        return_continue = (coef_, n, prod2ax_, prodm2ax_, sum1_, sum2_, sum3_, sum4_, sum5_)
        return_break = (coef, n_old, prod2ax, prodm2ax, sum1, sum2, sum3, sum4, sum5)

        r = tf.unstack(
            tf.where(tf.greater_equal(tf.multiply(coef, prod2ax) * (a * n), tf.multiply(relerr, sum5)), return_continue,
                     return_break))
        return r

    coef, n_old, prod2ax, prodm2ax, sum1, sum2, sum3, sum4, sum5 = tf.unstack(tf.while_loop(cond, body, iterators))
    return (expx2, sum1, sum2, sum3, sum4, sum5)

@tf.function(autograph=False)
def continued_elseifhelper(args): 
    """
        Helper function for 'faddeeva_helper function'   
        Uses x<10 to reduce numerical problems because of underflow/overflow
        problems which start to appear in the various coefficients of the sums for larger x.
    """

    (relerr, z, a, c, a2, x, y, ya, bool_exceptions, sum_variables) = args
    (sum1, sum2, sum3, sum4, sum5) = sum_variables
    prod2ax = prodm2ax = 1  
    zero = tf.constant(0., dtype=tf.float64)
    ret = tf.complex(zero, zero)
    exp2ax = tf.math.exp((2 * a) * x)
    expm2ax = 1 / exp2ax  
    exp_args = (x, y, a, a2, exp2ax, expm2ax, relerr, sum_variables)

    # computes exp(-a2*(n*n)) on the go
    (expx2, sum1, sum2, sum3, sum4, sum5) = tf.unstack(
                                                        tf.where(
                                                            x < 5e-4,
                                                            elseifhelper_if(exp_args),
                                                            elseifhelper_else(exp_args)
                                                            )
                                                        )

    expx2erfcxy = tf.where(tf.greater(y, -6), expx2 * erfcx(y), 2 * tf.math.exp(y * y - x * x))
    xs = tf.math.real(z)
    sinxy = tf.where(tf.greater(y, 5), tf.math.sin(x * y), tf.math.sin(tf.multiply(xs, y)))
    sin2xy = tf.math.sin(2 * xs * y)
    cos2xy = tf.math.cos(2 * xs * y)
    coef1 = expx2erfcxy - c * y * sum1
    coef2 = c * xs * expx2

    ret = tf.where(
                    tf.greater(y, 5),
                    tf.complex(
                       (expx2erfcxy - c * y * sum1) * tf.math.cos(2 * x * y) + (c * x * expx2) * sinxy * sinc(x * y,sinxy),
                       zero
                        ),
                    ret
                )
    ret = tf.where(
                    tf.less_equal(y, 5),
                    tf.complex(
                        coef1 * cos2xy + coef2 * sinxy * sinc(xs * y, sinxy),
                        coef2 * sinc(2 * xs * y, sin2xy) - coef1 * sin2xy),
                    ret
                )
    return (sum1, sum2, sum3, sum4, sum5, ret)

@tf.function(autograph=False)
def continued_elsehelper(args):
    """
        Helper function for 'faddeeva_helper function'   
        Here x is large, hence only sum3 & sum5 contribute
    """
    (relerr, z, a, c, a2, x, y, ya, bool_exceptions, sum_variables) = args
    (sum1, sum2, sum3, sum4, sum5) = sum_variables  
    bool_notexceptions = tf.math.logical_not(bool_exceptions)
    one = tf.constant(1., dtype=tf.float64)
    zero = tf.constant(0., dtype=tf.float64)
    ret = tf.math.exp(-x * x)
    n0 = tf.math.floor(tf.divide(x, a) + 0.5)
    dx = a * n0 - x
    sum3 = tf.math.exp(-dx * dx) / (a2 * (n0 * n0) + y * y)
    sum5 = a * n0 * sum3

    exp1 = tf.math.exp(4 * a * dx)
    exp1dn = tf.ones_like(sum3, dtype=tf.float64)
    dn = tf.ones_like(x, dtype=tf.float64)
    bool_temp = tf.ones_like(x, dtype=tf.float64) 
    iterators = (exp1dn, dn, sum3, sum5, bool_temp)

    # loop over n0-dn and n0+dn terms
    @tf.function(autograph=False)
    def cond(exp1dn_old, dn, sum3, sum5, bool_temp):
        return tf.reduce_any(tf.logical_and(tf.logical_and(tf.equal(bool_temp, one), tf.greater(n0, dn)), bool_notexceptions))

    @tf.function(autograph=False)
    def body(exp1dn_old, dn, sum3_old, sum5_old, bool_temp):
        np = n0 + dn
        nm = n0 - dn
        tp = tf.math.exp(-tf.math.square(a * dn + dx))
        exp1dn = exp1dn_old * exp1
        tm = tp * (exp1dn)
        tp /= (a2 * (np * np) + y * y)
        tm /= (a2 * (nm * nm) + y * y)
        sum3 = tf.math.add(sum3_old, (tp + tm))
        sum5 = tf.math.add(sum5_old, a * (np * tp + nm * tm))

        condition = tf.less(a * (np * tp + nm * tm), relerr * sum5)

        dn, sum3_toReturn, sum5_toReturn = tf.unstack(
                                                        tf.where(
                                                            tf.equal(bool_temp, one), 
                                                            (dn + one, sum3, sum5), 
                                                            (dn, sum3_old, sum5_old)
                                                            )
                                                    )
        bool_temp = tf.where(condition, tf.constant(0., dtype=tf.float64), bool_temp)
        return (exp1dn, dn, sum3_toReturn, sum5_toReturn, bool_temp)

    dn, sum3_old, sum5_old, bool_temp = tf.unstack(tf.while_loop(cond, body, iterators)[1:])

    bool_continue = tf.where(tf.equal(bool_temp, one), one, zero)  
    bool_continue = tf.where(tf.math.is_nan(x), zero, bool_continue)
    bool_continue = tf.where(tf.math.is_nan(y), zero, bool_continue)

    iterators_ = (dn, bool_continue, sum3, sum5)
    # loop over n0+dn terms only (since n0-dn <= 0)
    @tf.function(autograph=False)
    def cond2(dn, bool_continue, sum3, sum5):
        return tf.reduce_any(tf.math.logical_and(tf.equal(bool_continue, one),bool_notexceptions))

    @tf.function(autograph=False)
    def body2(dn_old, bool_continue, sum3_old, sum5_old):

        np = n0 + dn_old
        dn = dn_old + 1
        tp = tf.math.exp(-tf.math.square(a * dn + dx)) / (a2 * (np * np) + y * y)
        sum3 = sum3_old + tp
        sum5 = sum5_old + a * np * tp

        # return_condition and break condition
        condition = tf.less(a * np * tp, relerr * sum5)
        
        # if condition == True, make bool_continue False
        bool_continue = tf.where(condition, tf.constant(0., dtype=tf.float64), bool_continue)
        sum3, sum5 = tf.unstack(tf.where(condition, (sum3_old, sum5_old), (sum3, sum5)))
        return (dn, bool_continue, sum3, sum5)

    sum3_new, sum5_new = tf.unstack(tf.while_loop(cond2, body2, iterators_)[2:])
    sum3, sum5 = tf.unstack(tf.where(tf.equal(bool_continue, 1.), (sum3_new, sum5_new), (sum3_old, sum5_old)))

    ret = tf.complex(ret, tf.constant(0, dtype=tf.float64))
    return (sum1, sum2, sum3, sum4, sum5, ret)  

@tf.function(autograph=False)
def relerr_if_cond():
    a = tf.constant(0.518321480430085929872, dtype=tf.float64)
    c = tf.constant(0.329973702884629072537, dtype=tf.float64)
    a2 = tf.constant(0.268657157075235951582, dtype=tf.float64)
    return DBL_EPSILON, a, c, a2


@tf.function(autograph=False)
def relerr_else_cond():
    relerr = tf.constant(0.1, dtype=tf.float64)
    a = pi / (tf.math.sqrt(-tf.math.log(relerr * 0.5)))
    c = (2 / pi) * a
    a2 = tf.math.square(a)
    return relerr, a, c, a2

@tf.function(autograph=False)
def faddeeva_helper(z, relerr):
    """
    Helper function for faddeeva calculation.
    z - tensor, dtype = tf.complex128
    relerr - tensor, dtype = tf.float64
    """

    relerr, a, c, a2 = tf.unstack(tf.where(tf.less_equal(relerr, DBL_EPSILON), relerr_if_cond(), relerr_else_cond()))
    x = tf.math.abs(tf.math.real(z))
    y = tf.math.imag(z)
    ya = tf.math.abs(tf.math.imag(z))

    zero = tf.constant(0., dtype=tf.float64)
    ret = zero 
    sum1 = sum2 = sum3 = sum4 = sum5 = tf.zeros_like(x)
    sum_variables = (sum1, sum2, sum3, sum4, sum5) 
    # boolean_exceptions is true when we return answer after call to helper functions with no furthur operations to perform
    bool_exceptions = False  

    # Using continued fraction, algorithm 816 in this region
    cond1 = tf.math.logical_or(
                                tf.greater(ya, 7),
                                tf.math.logical_and(
                                    tf.greater(x, 6),
                                    tf.math.logical_or(
                                        tf.greater(ya, 0.1),
                                        tf.math.logical_or(
                                            tf.math.logical_and(
                                                tf.greater(x, 8),
                                                tf.greater(ya, 1e-10)
                                            ),
                                            tf.greater(x, 28)
                                        )
                                    )
                                )
                            )

    cond2 = tf.less(x, tf.constant(10, dtype=tf.float64)) 
    bool_exceptions = tf.where(cond1, True, bool_exceptions) 
    bool_exceptions = tf.where(tf.math.logical_or(tf.math.is_nan(y), tf.math.is_nan(x)), True, bool_exceptions)
    boolean_copy = bool_exceptions                  # boolean_copy is copy of boolean_exceptions
    bool_exceptions = tf.where(cond1,True,bool_exceptions)
    bool_exceptions = tf.where(cond2,True,bool_exceptions)

    args = (relerr, z, a, c, a2, x, y, ya, bool_exceptions, sum_variables)  

    ifhelper_result = continued_ifhelper(args)           # Uses continued fraction 
    elseifhelper_result = continued_elseifhelper(args)  # x<10 to reduce overlow/underflow in sum_variables
    elsehelper_result = continued_elsehelper(args)
    where2a = tf.where(cond2, elseifhelper_result[:-1], elsehelper_result[:-1]) 
    where2b = tf.where(cond2, elseifhelper_result[-1], elsehelper_result[-1]) 
    where1a = tf.where(cond1, ifhelper_result[:-1], where2a)
    where1b = tf.where(cond1, ifhelper_result[-1], where2b)
    (sum1, sum2, sum3, sum4, sum5, ret) = tf.unstack(where1a) + [where1b]

    ret = tf.where(tf.math.is_nan(x), tf.complex(x, x), ret)  # when x is nan
    ret = tf.where(tf.math.is_nan(y), tf.complex(y, y), ret)  # when y is nan

    sec_term_1 = (0.5 * c) * y * (sum2 + sum3)
    sec_term_2 = (0.5 * c) * tf.math.abs(sum5 - sum4) * tf.math.sign(tf.math.real(z))
    ret_else = tf.add(ret, tf.complex(sec_term_1, sec_term_2))
    ret = tf.where(boolean_copy, ret, ret_else)  # boolean_copy true means use results coming directly from functions
    return ret

@tf.function(autograph=False)
def faddeeva(z, relerr): 
    x = tf.math.real(z)
    y = tf.math.imag(z)

    zero = tf.constant(0., dtype=tf.float64)
    ret = tf.where(
                    tf.equal(x, zero),
                    tf.complex(erfcx(y), zero),
                    tf.where(
                        tf.equal(y, zero), 
                        tf.complex(tf.math.exp(-tf.math.square(x)), faddeeva_img(x)),
                        faddeeva_helper(z, relerr)
                    )
                )
    return ret

def unit_tests():

    complex_list = [(624.2,-0.26123),
      (82.22756651,-349.16044211),
      (-0.4,3.),
      (0.6,2.),
      (-1.,1.),
      (-1.,-9.),
      (-1.,9.),
      (-0.0000000234545,1.1234),
      (-3.,5.1),
      (-53,30.1),
      (0.0,0.12345),
      (11,1),
      (-22,-2),
      (9,-28),
      (21,-33),
      (1e5,1e5),
      (1e14,1e14),
      (-3001,-1000),
      (1e160,-1e159),
      (-6.01,0.01),
      (-0.7,-0.7),
      (2.611780000000000e+01, 4.540909610972489e+03),
      (0.8e7,0.3e7),
      (-20,-19.8081),
      (1e-16,-1.1e-16),
      (2.3e-8,1.3e-8),
      (6.3,-1e-13),
      (6.3,1e-20),
      (1e-20,6.3),
      (1e-20,16.3),
      (9,1e-300),
      (6.01,0.11),
      (8.01,1.01e-10),
      (28.01,1e-300),
      (10.01,1e-200),
      (10.01,-1e-200),
      (10.01,0.99e-10),
      (10.01,-0.99e-10),
      (1e-20,7.01),
      (-1,7.01),
      (5.99,7.01),
      (1,0),
      (55,0),
      (-0.1,0),
      (1e-20,0),
      (0,5e-14),
      (0,51),
      (np.inf,0),
      (-np.inf,0),
      (0,np.inf),
      (0,-np.inf),
      (np.inf,np.inf),
      (np.inf,-np.inf),
      (np.nan,np.nan),
      (np.nan,0),
      (0,np.nan),
      (np.nan,np.inf),
      (np.inf,np.nan)
      ]

    numpy_complex_list=[]
    for i in range(len(complex_list)):
        numpy_complex_list.append(np.complex128(complex_list[i][0]+1j*complex_list[i][1]))

    faddeeva_ans = []
    tf_complex_list = tf.convert_to_tensor(numpy_complex_list)
    relerr = tf.constant(0.,dtype = tf.float64)

    result = faddeeva(tf_complex_list,relerr)

    for i in range(len(result)):
        print("Complex no. : ",complex_list[i],"  Scipy ans : ",special.wofz(numpy_complex_list[i])," TF ans : ",result[i].numpy())
        
unit_tests()